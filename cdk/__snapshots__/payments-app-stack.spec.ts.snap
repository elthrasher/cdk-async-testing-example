// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Entire Stack create the entire stack 1`] = `
Object {
  "Outputs": Object {
    "IntTestResult": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "IntTestResource",
          "Result",
        ],
      },
    },
    "socketsWebsocketendpoint44A72F7E": Object {
      "Value": Object {
        "Fn::GetAtt": Array [
          "socketssocketsapiD8FF7C66",
          "ApiEndpoint",
        ],
      },
    },
  },
  "Parameters": Any<Object>,
  "Resources": Object {
    "AppStackNestedStackAppStackNestedStackResource7180F534": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "TemplateURL": Object {
          "Fn::Join": Array [
            "",
            Array [
              "https://s3.us-east-1.",
              Object {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              Object {
                "Ref": "AssetParameters44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8aS3Bucket2C4CA032",
              },
              "/",
              Object {
                "Fn::Select": Array [
                  0,
                  Object {
                    "Fn::Split": Array [
                      "||",
                      Object {
                        "Ref": "AssetParameters44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8aS3VersionKeyF0C529DD",
                      },
                    ],
                  },
                ],
              },
              Object {
                "Fn::Select": Array [
                  1,
                  Object {
                    "Fn::Split": Array [
                      "||",
                      Object {
                        "Ref": "AssetParameters44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8aS3VersionKeyF0C529DD",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
      "UpdateReplacePolicy": "Delete",
    },
    "CollectionsRule86D4223F": Object {
      "Properties": Object {
        "Description": "Need to call in Knuckles",
        "EventBusName": Object {
          "Ref": "PaymentBus7030EAFE",
        },
        "EventPattern": Object {
          "detail-type": Array [
            "collections",
          ],
          "source": Array [
            "payments",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Ref": "StateMachine2E01A3A5",
            },
            "Id": "Target0",
            "RoleArn": Object {
              "Fn::GetAtt": Array [
                "StateMachineEventsRoleDBCDECD1",
                "Arn",
              ],
            },
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "IntTestEvent6B0C674C": Object {
      "DependsOn": Array [
        "IntTestEventServiceRoleDefaultPolicy507D225D",
        "IntTestEventServiceRoleB0485C55",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
            "BUS_NAME": Object {
              "Ref": "PaymentBus7030EAFE",
            },
          },
        },
        "FunctionName": "IntTestEvent",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "IntTestEventServiceRoleB0485C55",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "IntTestEventServiceRoleB0485C55": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "IntTestEventServiceRoleDefaultPolicy507D225D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "PaymentBus7030EAFE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "IntTestEventServiceRoleDefaultPolicy507D225D",
        "Roles": Array [
          Object {
            "Ref": "IntTestEventServiceRoleB0485C55",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "IntTestIsComplete2C6DF3B6": Object {
      "DependsOn": Array [
        "IntTestIsCompleteServiceRoleDefaultPolicy242C1B70",
        "IntTestIsCompleteServiceRoleB4AAE9B5",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "FunctionName": "IntTestIsComplete",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "IntTestIsCompleteServiceRoleB4AAE9B5",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "IntTestIsCompleteServiceRoleB4AAE9B5": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "IntTestIsCompleteServiceRoleDefaultPolicy242C1B70": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "dynamodb:GetItem",
              "Condition": Object {
                "ForAllValues:StringLike": Object {
                  "dynamodb:LeadingKeys": Array [
                    "TEST#*",
                  ],
                },
              },
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "PaymentsTable48A42630",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "IntTestIsCompleteServiceRoleDefaultPolicy242C1B70",
        "Roles": Array [
          Object {
            "Ref": "IntTestIsCompleteServiceRoleB4AAE9B5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "IntTestProviderframeworkisComplete90F9EA47": Object {
      "DependsOn": Array [
        "IntTestProviderframeworkisCompleteServiceRoleDefaultPolicy79A88BEB",
        "IntTestProviderframeworkisCompleteServiceRole8B65A706",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Description": "AWS CDK resource provider framework - isComplete (TestStack/IntTestProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "IntTestIsComplete2C6DF3B6",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "IntTestEvent6B0C674C",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.isComplete",
        "Role": Object {
          "Fn::GetAtt": Array [
            "IntTestProviderframeworkisCompleteServiceRole8B65A706",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "IntTestProviderframeworkisCompleteLogRetention08FE281D": Object {
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "IntTestProviderframeworkisComplete90F9EA47",
              },
            ],
          ],
        },
        "RetentionInDays": 1,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "IntTestProviderframeworkisCompleteServiceRole8B65A706": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "IntTestProviderframeworkisCompleteServiceRoleDefaultPolicy79A88BEB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IntTestEvent6B0C674C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IntTestIsComplete2C6DF3B6",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "IntTestProviderframeworkisCompleteServiceRoleDefaultPolicy79A88BEB",
        "Roles": Array [
          Object {
            "Ref": "IntTestProviderframeworkisCompleteServiceRole8B65A706",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "IntTestProviderframeworkonEvent3F461415": Object {
      "DependsOn": Array [
        "IntTestProviderframeworkonEventServiceRoleDefaultPolicy5899AF2D",
        "IntTestProviderframeworkonEventServiceRole76B9D4E0",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Description": "AWS CDK resource provider framework - onEvent (TestStack/IntTestProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "IntTestIsComplete2C6DF3B6",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "IntTestEvent6B0C674C",
                "Arn",
              ],
            },
            "WAITER_STATE_MACHINE_ARN": Object {
              "Ref": "IntTestProviderwaiterstatemachine7D760B62",
            },
          },
        },
        "Handler": "framework.onEvent",
        "Role": Object {
          "Fn::GetAtt": Array [
            "IntTestProviderframeworkonEventServiceRole76B9D4E0",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "IntTestProviderframeworkonEventLogRetention004914F2": Object {
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "IntTestProviderframeworkonEvent3F461415",
              },
            ],
          ],
        },
        "RetentionInDays": 1,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "IntTestProviderframeworkonEventServiceRole76B9D4E0": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "IntTestProviderframeworkonEventServiceRoleDefaultPolicy5899AF2D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IntTestEvent6B0C674C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IntTestIsComplete2C6DF3B6",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "IntTestProviderwaiterstatemachine7D760B62",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "IntTestProviderframeworkonEventServiceRoleDefaultPolicy5899AF2D",
        "Roles": Array [
          Object {
            "Ref": "IntTestProviderframeworkonEventServiceRole76B9D4E0",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "IntTestProviderframeworkonTimeout64952C65": Object {
      "DependsOn": Array [
        "IntTestProviderframeworkonTimeoutServiceRoleDefaultPolicy7155D320",
        "IntTestProviderframeworkonTimeoutServiceRoleF123FB0A",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Description": "AWS CDK resource provider framework - onTimeout (TestStack/IntTestProvider)",
        "Environment": Object {
          "Variables": Object {
            "USER_IS_COMPLETE_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "IntTestIsComplete2C6DF3B6",
                "Arn",
              ],
            },
            "USER_ON_EVENT_FUNCTION_ARN": Object {
              "Fn::GetAtt": Array [
                "IntTestEvent6B0C674C",
                "Arn",
              ],
            },
          },
        },
        "Handler": "framework.onTimeout",
        "Role": Object {
          "Fn::GetAtt": Array [
            "IntTestProviderframeworkonTimeoutServiceRoleF123FB0A",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 900,
      },
      "Type": "AWS::Lambda::Function",
    },
    "IntTestProviderframeworkonTimeoutLogRetention5F05E760": Object {
      "Properties": Object {
        "LogGroupName": Object {
          "Fn::Join": Array [
            "",
            Array [
              "/aws/lambda/",
              Object {
                "Ref": "IntTestProviderframeworkonTimeout64952C65",
              },
            ],
          ],
        },
        "RetentionInDays": 1,
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A",
            "Arn",
          ],
        },
      },
      "Type": "Custom::LogRetention",
    },
    "IntTestProviderframeworkonTimeoutServiceRoleDefaultPolicy7155D320": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IntTestEvent6B0C674C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IntTestIsComplete2C6DF3B6",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "IntTestProviderframeworkonTimeoutServiceRoleDefaultPolicy7155D320",
        "Roles": Array [
          Object {
            "Ref": "IntTestProviderframeworkonTimeoutServiceRoleF123FB0A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "IntTestProviderframeworkonTimeoutServiceRoleF123FB0A": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "IntTestProviderwaiterstatemachine7D760B62": Object {
      "DependsOn": Array [
        "IntTestProviderwaiterstatemachineRoleDefaultPolicy7610AA12",
        "IntTestProviderwaiterstatemachineRole8DC2DBE7",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"framework-isComplete-task\\",\\"States\\":{\\"framework-isComplete-task\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"IntervalSeconds\\":5,\\"MaxAttempts\\":12,\\"BackoffRate\\":1}],\\"Catch\\":[{\\"ErrorEquals\\":[\\"States.ALL\\"],\\"Next\\":\\"framework-onTimeout-task\\"}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "IntTestProviderframeworkisComplete90F9EA47",
                  "Arn",
                ],
              },
              "\\"},\\"framework-onTimeout-task\\":{\\"End\\":true,\\"Type\\":\\"Task\\",\\"Resource\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "IntTestProviderframeworkonTimeout64952C65",
                  "Arn",
                ],
              },
              "\\"}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "IntTestProviderwaiterstatemachineRole8DC2DBE7",
            "Arn",
          ],
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "IntTestProviderwaiterstatemachineRole8DC2DBE7": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "states.us-east-1.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "IntTestProviderwaiterstatemachineRoleDefaultPolicy7610AA12": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IntTestProviderframeworkisComplete90F9EA47",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "IntTestProviderframeworkonTimeout64952C65",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "IntTestProviderwaiterstatemachineRoleDefaultPolicy7610AA12",
        "Roles": Array [
          Object {
            "Ref": "IntTestProviderwaiterstatemachineRole8DC2DBE7",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "IntTestResource": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "ServiceToken": Object {
          "Fn::GetAtt": Array [
            "IntTestProviderframeworkonEvent3F461415",
            "Arn",
          ],
        },
        "Version": Any<String>,
      },
      "Type": "AWS::CloudFormation::CustomResource",
      "UpdateReplacePolicy": "Delete",
    },
    "IntegrationTestStackNestedStackIntegrationTestStackNestedStackResource6D5B58C2": Object {
      "DeletionPolicy": "Delete",
      "DependsOn": Array [
        "AppStackNestedStackAppStackNestedStackResource7180F534",
      ],
      "Properties": Object {
        "TemplateURL": Object {
          "Fn::Join": Array [
            "",
            Array [
              "https://s3.us-east-1.",
              Object {
                "Ref": "AWS::URLSuffix",
              },
              "/",
              Object {
                "Ref": "AssetParameters44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8aS3Bucket2C4CA032",
              },
              "/",
              Object {
                "Fn::Select": Array [
                  0,
                  Object {
                    "Fn::Split": Array [
                      "||",
                      Object {
                        "Ref": "AssetParameters44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8aS3VersionKeyF0C529DD",
                      },
                    ],
                  },
                ],
              },
              Object {
                "Fn::Select": Array [
                  1,
                  Object {
                    "Fn::Split": Array [
                      "||",
                      Object {
                        "Ref": "AssetParameters44136fa355b3678a1146ad16f7e8649e94fb4fc21fe77e8310c060f61caaff8aS3VersionKeyF0C529DD",
                      },
                    ],
                  },
                ],
              },
            ],
          ],
        },
      },
      "Type": "AWS::CloudFormation::Stack",
      "UpdateReplacePolicy": "Delete",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aFD4BFC8A": Object {
      "DependsOn": Array [
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
      },
      "Type": "AWS::Lambda::Function",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:PutRetentionPolicy",
                "logs:DeleteRetentionPolicy",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRoleDefaultPolicyADDA7DEB",
        "Roles": Array [
          Object {
            "Ref": "LogRetentionaae0aa3c5b4d4f87b02d85b201efdd8aServiceRole9741ECFB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "PaymentBus7030EAFE": Object {
      "Properties": Object {
        "Name": "PaymentBus",
      },
      "Type": "AWS::Events::EventBus",
    },
    "PaymentFailureRule210588D7": Object {
      "Properties": Object {
        "Description": "We did not get paid",
        "EventBusName": Object {
          "Ref": "PaymentBus7030EAFE",
        },
        "EventPattern": Object {
          "detail-type": Array [
            "failure",
          ],
          "source": Array [
            "payments",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "paymentFailureFunction2E4A54C2",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "PaymentFailureRuleAllowEventRuleTestStackpaymentFailureFunctionA9A5D9FA42F52C07": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "paymentFailureFunction2E4A54C2",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "PaymentFailureRule210588D7",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "PaymentSuccessRule6A2E1881": Object {
      "Properties": Object {
        "Description": "We got paid",
        "EventBusName": Object {
          "Ref": "PaymentBus7030EAFE",
        },
        "EventPattern": Object {
          "detail-type": Array [
            "success",
          ],
          "source": Array [
            "payments",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "paymentSuccessFunction82B44889",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "PaymentSuccessRuleAllowEventRuleTestStackpaymentSuccessFunction2825DDDB04ADF12F": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "paymentSuccessFunction82B44889",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "PaymentSuccessRule6A2E1881",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "PaymentsTable48A42630": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "pk",
            "AttributeType": "S",
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "pk",
            "KeyType": "HASH",
          },
        ],
        "ProvisionedThroughput": Object {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5,
        },
        "TableName": "payments",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
    "StateMachine2E01A3A5": Object {
      "DependsOn": Array [
        "StateMachineRoleDefaultPolicyDF1E6607",
        "StateMachineRoleB840431D",
      ],
      "Properties": Object {
        "DefinitionString": Object {
          "Fn::Join": Array [
            "",
            Array [
              "{\\"StartAt\\":\\"OpenCollection\\",\\"States\\":{\\"OpenCollection\\":{\\"Next\\":\\"Collect\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "openCollectionFunctionAD7A9939",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Collect\\":{\\"Next\\":\\"Is Collection Successful?\\",\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "collectFunctionF1DD4A0C",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"Is Collection Successful?\\":{\\"Type\\":\\"Choice\\",\\"Choices\\":[{\\"Variable\\":\\"$.Payload.Status\\",\\"NumericEquals\\":0,\\"Next\\":\\"CollectionSuccess\\"},{\\"Variable\\":\\"$.Payload.Status\\",\\"NumericEquals\\":1,\\"Next\\":\\"CollectionFailure\\"}]},\\"CollectionSuccess\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "collectionSuccessFunction5C4E05C2",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}},\\"CollectionFailure\\":{\\"End\\":true,\\"Retry\\":[{\\"ErrorEquals\\":[\\"Lambda.ServiceException\\",\\"Lambda.AWSLambdaException\\",\\"Lambda.SdkClientException\\"],\\"IntervalSeconds\\":2,\\"MaxAttempts\\":6,\\"BackoffRate\\":2}],\\"Type\\":\\"Task\\",\\"Resource\\":\\"arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke\\",\\"Parameters\\":{\\"FunctionName\\":\\"",
              Object {
                "Fn::GetAtt": Array [
                  "collectionFailureFunction682979FB",
                  "Arn",
                ],
              },
              "\\",\\"Payload.$\\":\\"$\\"}}}}",
            ],
          ],
        },
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "StateMachineRoleB840431D",
            "Arn",
          ],
        },
        "StateMachineName": "CollectionsStateMachine",
      },
      "Type": "AWS::StepFunctions::StateMachine",
    },
    "StateMachineEventsRoleDBCDECD1": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "events.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StateMachineEventsRoleDefaultPolicyFB602CA9": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "states:StartExecution",
              "Effect": "Allow",
              "Resource": Object {
                "Ref": "StateMachine2E01A3A5",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StateMachineEventsRoleDefaultPolicyFB602CA9",
        "Roles": Array [
          Object {
            "Ref": "StateMachineEventsRoleDBCDECD1",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "StateMachineRoleB840431D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "states.us-east-1.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "StateMachineRoleDefaultPolicyDF1E6607": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "openCollectionFunctionAD7A9939",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "collectFunctionF1DD4A0C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "collectionSuccessFunction5C4E05C2",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "collectionFailureFunction682979FB",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "StateMachineRoleDefaultPolicyDF1E6607",
        "Roles": Array [
          Object {
            "Ref": "StateMachineRoleB840431D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "collectFunctionF1DD4A0C": Object {
      "DependsOn": Array [
        "collectFunctionServiceRoleBD487856",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "FunctionName": "collect",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "collectFunctionServiceRoleBD487856",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "collectFunctionServiceRoleBD487856": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "collectionFailureFunction682979FB": Object {
      "DependsOn": Array [
        "collectionFailureFunctionServiceRoleDefaultPolicyB9F37612",
        "collectionFailureFunctionServiceRole662CE2FF",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "FunctionName": "collectionFailure",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "collectionFailureFunctionServiceRole662CE2FF",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "collectionFailureFunctionServiceRole662CE2FF": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "collectionFailureFunctionServiceRoleDefaultPolicyB9F37612": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PaymentsTable48A42630",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "collectionFailureFunctionServiceRoleDefaultPolicyB9F37612",
        "Roles": Array [
          Object {
            "Ref": "collectionFailureFunctionServiceRole662CE2FF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "collectionSuccessFunction5C4E05C2": Object {
      "DependsOn": Array [
        "collectionSuccessFunctionServiceRoleDefaultPolicyA0766DBC",
        "collectionSuccessFunctionServiceRole727C0164",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "FunctionName": "collectionSuccess",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "collectionSuccessFunctionServiceRole727C0164",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "collectionSuccessFunctionServiceRole727C0164": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "collectionSuccessFunctionServiceRoleDefaultPolicyA0766DBC": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PaymentsTable48A42630",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "collectionSuccessFunctionServiceRoleDefaultPolicyA0766DBC",
        "Roles": Array [
          Object {
            "Ref": "collectionSuccessFunctionServiceRole727C0164",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "openCollectionFunctionAD7A9939": Object {
      "DependsOn": Array [
        "openCollectionFunctionServiceRoleDefaultPolicy7EB84761",
        "openCollectionFunctionServiceRole5D634737",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "FunctionName": "openCollection",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "openCollectionFunctionServiceRole5D634737",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "openCollectionFunctionServiceRole5D634737": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "openCollectionFunctionServiceRoleDefaultPolicy7EB84761": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PaymentsTable48A42630",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "openCollectionFunctionServiceRoleDefaultPolicy7EB84761",
        "Roles": Array [
          Object {
            "Ref": "openCollectionFunctionServiceRole5D634737",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "paymentFailureFunction2E4A54C2": Object {
      "DependsOn": Array [
        "paymentFailureFunctionServiceRoleDefaultPolicy78A9826D",
        "paymentFailureFunctionServiceRole7EB3B3AA",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "FunctionName": "paymentFailure",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "paymentFailureFunctionServiceRole7EB3B3AA",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "paymentFailureFunctionServiceRole7EB3B3AA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "paymentFailureFunctionServiceRoleDefaultPolicy78A9826D": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PaymentsTable48A42630",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
            Object {
              "Action": "events:PutEvents",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "PaymentBus7030EAFE",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "paymentFailureFunctionServiceRoleDefaultPolicy78A9826D",
        "Roles": Array [
          Object {
            "Ref": "paymentFailureFunctionServiceRole7EB3B3AA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "paymentSuccessFunction82B44889": Object {
      "DependsOn": Array [
        "paymentSuccessFunctionServiceRoleDefaultPolicyBD68F7D7",
        "paymentSuccessFunctionServiceRole417E5467",
      ],
      "Properties": Object {
        "Architectures": Array [
          "arm64",
        ],
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
          },
        },
        "FunctionName": "paymentSuccess",
        "Handler": "index.handler",
        "Role": Object {
          "Fn::GetAtt": Array [
            "paymentSuccessFunctionServiceRole417E5467",
            "Arn",
          ],
        },
        "Runtime": "nodejs14.x",
        "Timeout": 60,
      },
      "Type": "AWS::Lambda::Function",
    },
    "paymentSuccessFunctionServiceRole417E5467": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "paymentSuccessFunctionServiceRoleDefaultPolicyBD68F7D7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "PaymentsTable48A42630",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "paymentSuccessFunctionServiceRoleDefaultPolicyBD68F7D7",
        "Roles": Array [
          Object {
            "Ref": "paymentSuccessFunctionServiceRole417E5467",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "socketsWebsocketRule0B7D8648": Object {
      "Properties": Object {
        "EventBusName": Object {
          "Ref": "PaymentBus7030EAFE",
        },
        "EventPattern": Object {
          "source": Array [
            "payments",
          ],
        },
        "State": "ENABLED",
        "Targets": Array [
          Object {
            "Arn": Object {
              "Fn::GetAtt": Array [
                "socketseventbridgebrokerFC701A28",
                "Arn",
              ],
            },
            "Id": "Target0",
          },
        ],
      },
      "Type": "AWS::Events::Rule",
    },
    "socketsWebsocketRuleAllowEventRuleTestStacksocketseventbridgebrokerB0369B77FC0323AD": Object {
      "Properties": Object {
        "Action": "lambda:InvokeFunction",
        "FunctionName": Object {
          "Fn::GetAtt": Array [
            "socketseventbridgebrokerFC701A28",
            "Arn",
          ],
        },
        "Principal": "events.amazonaws.com",
        "SourceArn": Object {
          "Fn::GetAtt": Array [
            "socketsWebsocketRule0B7D8648",
            "Arn",
          ],
        },
      },
      "Type": "AWS::Lambda::Permission",
    },
    "socketsconnectlambdaintegration94A5D2E7": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "socketssocketsapiD8FF7C66",
        },
        "CredentialsArn": Object {
          "Fn::GetAtt": Array [
            "socketssocketsapiiamrole80934E79",
            "Arn",
          ],
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
              Object {
                "Fn::GetAtt": Array [
                  "socketsonconnectAF5470EE",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "socketsconnectroute9FB2E3E8": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "socketssocketsapiD8FF7C66",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$connect",
        "Target": Object {
          "Fn::Join": Array [
            "",
            Array [
              "integrations/",
              Object {
                "Ref": "socketsconnectlambdaintegration94A5D2E7",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "socketsdisconnectlambdaintegrationEC2FA407": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "socketssocketsapiD8FF7C66",
        },
        "CredentialsArn": Object {
          "Fn::GetAtt": Array [
            "socketssocketsapiiamrole80934E79",
            "Arn",
          ],
        },
        "IntegrationType": "AWS_PROXY",
        "IntegrationUri": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/",
              Object {
                "Fn::GetAtt": Array [
                  "socketsondisconnect009BF7B1",
                  "Arn",
                ],
              },
              "/invocations",
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "socketsdisconnectrouteCA8E55D8": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "socketssocketsapiD8FF7C66",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "$disconnect",
        "Target": Object {
          "Fn::Join": Array [
            "",
            Array [
              "integrations/",
              Object {
                "Ref": "socketsdisconnectlambdaintegrationEC2FA407",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "socketseventbridgebrokerFC701A28": Object {
      "DependsOn": Array [
        "socketseventbridgebrokerServiceRoleDefaultPolicyFAF00DD4",
        "socketseventbridgebrokerServiceRole35F5E406",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "TABLE_NAME": "sockets-connections-table",
            "WEBSOCKET_API": Object {
              "Fn::Join": Array [
                "",
                Array [
                  Object {
                    "Fn::GetAtt": Array [
                      "socketssocketsapiD8FF7C66",
                      "ApiEndpoint",
                    ],
                  },
                  "/dev",
                ],
              ],
            },
          },
        },
        "Handler": "eventbridge-broker.handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "socketseventbridgebrokerServiceRole35F5E406",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "socketseventbridgebrokerServiceRole35F5E406": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "socketseventbridgebrokerServiceRoleDefaultPolicyFAF00DD4": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "execute-api:ManageConnections",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:aws:execute-api:us-east-1:123456789:",
                    Object {
                      "Ref": "socketssocketsapiD8FF7C66",
                    },
                    "/*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "socketssocketsconnectionstable568D7DDC",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "socketseventbridgebrokerServiceRoleDefaultPolicyFAF00DD4",
        "Roles": Array [
          Object {
            "Ref": "socketseventbridgebrokerServiceRole35F5E406",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "socketsonconnectAF5470EE": Object {
      "DependsOn": Array [
        "socketsonconnectServiceRoleDefaultPolicyD6139915",
        "socketsonconnectServiceRole26AE5142",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "TABLE_NAME": "sockets-connections-table",
          },
        },
        "Handler": "on-connect.handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "socketsonconnectServiceRole26AE5142",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "socketsonconnectServiceRole26AE5142": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "socketsonconnectServiceRoleDefaultPolicyD6139915": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "socketssocketsconnectionstable568D7DDC",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "socketsonconnectServiceRoleDefaultPolicyD6139915",
        "Roles": Array [
          Object {
            "Ref": "socketsonconnectServiceRole26AE5142",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "socketsondisconnect009BF7B1": Object {
      "DependsOn": Array [
        "socketsondisconnectServiceRoleDefaultPolicy1C4F10A1",
        "socketsondisconnectServiceRoleAED49009",
      ],
      "Properties": Object {
        "Code": Any<Object>,
        "Environment": Object {
          "Variables": Object {
            "TABLE_NAME": "sockets-connections-table",
          },
        },
        "Handler": "on-disconnect.handler",
        "MemorySize": 256,
        "Role": Object {
          "Fn::GetAtt": Array [
            "socketsondisconnectServiceRoleAED49009",
            "Arn",
          ],
        },
        "Runtime": "nodejs12.x",
        "Timeout": 300,
      },
      "Type": "AWS::Lambda::Function",
    },
    "socketsondisconnectServiceRoleAED49009": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": Array [
          Object {
            "Fn::Join": Array [
              "",
              Array [
                "arn:",
                Object {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "socketsondisconnectServiceRoleDefaultPolicy1C4F10A1": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "dynamodb:BatchGetItem",
                "dynamodb:GetRecords",
                "dynamodb:GetShardIterator",
                "dynamodb:Query",
                "dynamodb:GetItem",
                "dynamodb:Scan",
                "dynamodb:ConditionCheckItem",
                "dynamodb:BatchWriteItem",
                "dynamodb:PutItem",
                "dynamodb:UpdateItem",
                "dynamodb:DeleteItem",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "socketssocketsconnectionstable568D7DDC",
                    "Arn",
                  ],
                },
                Object {
                  "Ref": "AWS::NoValue",
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "socketsondisconnectServiceRoleDefaultPolicy1C4F10A1",
        "Roles": Array [
          Object {
            "Ref": "socketsondisconnectServiceRoleAED49009",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "socketssocketsapiD8FF7C66": Object {
      "Properties": Object {
        "Name": "EventBridgeSockets",
        "ProtocolType": "WEBSOCKET",
        "RouteSelectionExpression": "$request.body.action",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "socketssocketsapideployment1E29EE87": Object {
      "DependsOn": Array [
        "socketsconnectroute9FB2E3E8",
        "socketsdisconnectrouteCA8E55D8",
      ],
      "Properties": Object {
        "ApiId": Object {
          "Ref": "socketssocketsapiD8FF7C66",
        },
      },
      "Type": "AWS::ApiGatewayV2::Deployment",
    },
    "socketssocketsapiiamrole80934E79": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "apigateway.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "socketssocketsapiiamroleDefaultPolicy1C0BEE6C": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "socketsonconnectAF5470EE",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "socketsondisconnect009BF7B1",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::GetAtt": Array [
                    "socketseventbridgebrokerFC701A28",
                    "Arn",
                  ],
                },
              ],
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "socketssocketsapiiamroleDefaultPolicy1C0BEE6C",
        "Roles": Array [
          Object {
            "Ref": "socketssocketsapiiamrole80934E79",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "socketssocketsapistageCA5306B1": Object {
      "Properties": Object {
        "ApiId": Object {
          "Ref": "socketssocketsapiD8FF7C66",
        },
        "AutoDeploy": true,
        "DeploymentId": Object {
          "Ref": "socketssocketsapideployment1E29EE87",
        },
        "StageName": "dev",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "socketssocketsconnectionstable568D7DDC": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AttributeDefinitions": Array [
          Object {
            "AttributeName": "connectionId",
            "AttributeType": "S",
          },
        ],
        "KeySchema": Array [
          Object {
            "AttributeName": "connectionId",
            "KeyType": "HASH",
          },
        ],
        "ProvisionedThroughput": Object {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5,
        },
        "TableName": "sockets-connections-table",
      },
      "Type": "AWS::DynamoDB::Table",
      "UpdateReplacePolicy": "Delete",
    },
  },
}
`;
